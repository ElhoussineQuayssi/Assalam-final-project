PROJECT TASK BREAKDOWN: Next.js Foundation Admin Dashboard for Projects
===================================================================

PHASE 1: PROJECT SETUP & DATA SCHEMA
------------------------------------
1.  Analyze the existing project page structure (e.g., app/projects/Imtiaz/page.jsx) and define a TypeScript interface (Project) in `types/project.ts`.
2.  Create a data storage utility file `lib/projects.js` with functions for reading from and writing to `data/projects.json` (similar to existing lib/blogs.js but for JSON).
3.  Create the initial `data/projects.json` file with an empty array or migrate existing static projects.

PHASE 2: AUTHENTICATION SYSTEM (Switch to NextAuth)
-------------------------------
4.  Install required dependencies: next-auth, @auth/prisma-adapter (or keep custom if needed, but task specifies next-auth).
5.  Configure NextAuth.js: Create `lib/auth.js` with CredentialsProvider (adapt existing custom auth to next-auth).
6.  Create the API route for authentication: `app/api/auth/[...nextauth]/route.js`.
7.  Create a client-side auth provider component (`components/auth-provider.tsx`).
8.  Update the login page: `app/admin/login/page.jsx` to use next-auth.
9.  Create a custom sign-out component.

PHASE 3: ADMIN LAYOUT & PROTECTED ROUTES
----------------------------------------
10. Update admin layout: `app/admin/layout.jsx` that protects all /admin/* routes using next-auth session check.
11. Update the admin dashboard homepage (`app/admin/dashboard/page.jsx`) to include projects section.

PHASE 4: PROJECT LIST VIEW
--------------------------
12. Create a server component to fetch all projects on the admin dashboard page.
13. Create a client-side table component (`components/admin/projects-table.jsx`) to display the list of projects with edit/delete buttons.

PHASE 5: PROJECT FORM COMPONENT (Most Complex Part)
---------------------------------------------------
14. Create new pages for the form: `app/admin/projects/new/page.jsx` and `app/admin/projects/edit/[id]/page.jsx`.
15. Build a massive form component (`components/admin/project-form.jsx`) using react-hook-form and Shadcn/ui components.
    a. Map basic fields: title, excerpt, image path, startDate, location, etc.
    b. Implement dynamic array fields for: content sections, goals, timeline (with nested events), FAQs, testimonials, gallery, relatedProjects.
    c. Add validation logic for required fields.
    d. Implement logic to generate a slug from the title.

PHASE 6: CRUD API ROUTES
------------------------
16. Create API endpoint for creating a project: `app/api/admin/projects/route.js` (POST).
17. Create API endpoint for updating a project: `app/api/admin/projects/[id]/route.js` (PUT).
18. Create API endpoint for deleting a project: `app/api/admin/projects/[id]/route.js` (DELETE).

PHASE 7: INTEGRATION & FINALIZING ADMIN PANEL
---------------------------------------------
19. Connect the "Create New Project" button to the form page.
20. Connect the form's onSubmit to the POST/PUT API routes.
21. Connect the edit buttons in the table to pre-fill the edit form.
22. Connect the delete buttons to the DELETE API route and add a confirmation dialog.
23. Add success/error toast notifications for all actions.

PHASE 8: UPDATE MAIN WEBSITE PAGES
----------------------------------
24. Modify the existing project page (`app/projects/[slug]/page.jsx`) to fetch data from `lib/projects.js` based on the slug parameter.
25. Create or modify a project listing page (`app/projects/page.jsx`) to display all projects from the JSON file.
26. Test the entire flow: Create a project in admin -> View it on the main site.

PHASE 9: DOCUMENTATION & POLISH
-------------------------------
27. Write setup instructions in a README.md (environment variables for admin credentials).
28. Do a final review, polish the UI, and ensure all functionality works as expected.
