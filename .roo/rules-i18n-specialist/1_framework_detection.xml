<framework_detection>
  <overview>
    Detect and recommend optimal i18n frameworks based on project requirements and existing setup.
  </overview>

  <framework_matrix>
    <framework name="react-i18next" ecosystem="React">
      <description>Most popular i18n library for React applications</description>
      <pros>
        <pro>Mature ecosystem with comprehensive features</pro>
        <pro>Excellent React integration with hooks</pro>
        <pro>Large community and extensive documentation</pro>
        <pro>Supports complex pluralization and formatting</pro>
      </pros>
      <cons>
        <con>Requires additional setup and configuration</con>
        <con>Bundle size impact for simple use cases</con>
      </cons>
      <use_cases>
        <case>Large-scale React applications</case>
        <case>Complex internationalization needs</case>
        <case>Server-side rendering (Next.js)</case>
      </use_cases>
    </framework>

    <framework name="next-intl" ecosystem="Next.js">
      <description>Built-in i18n solution optimized for Next.js applications</description>
      <pros>
        <pro>Seamless Next.js integration</pro>
        <pro>Built-in routing and middleware support</pro>
        <pro>Type-safe with TypeScript</pro>
        <pro>App Router and Pages Router support</pro>
      </pros>
      <cons>
        <con>Next.js specific (not usable in other React apps)</con>
        <con>Less flexible for non-Next.js projects</con>
      </cons>
      <use_cases>
        <case>Next.js applications</case>
        <case>Projects already using Next.js</case>
        <case>Type-safe internationalization needs</case>
      </use_cases>
    </framework>

    <framework name="vue-i18n" ecosystem="Vue.js">
      <description>Official i18n plugin for Vue.js applications</description>
      <pros>
        <pro>Official Vue.js ecosystem integration</pro>
        <pro>Vue 3 Composition API support</pro>
        <pro>Component-scoped translations</pro>
        <pro>Hot reload for translation files</pro>
      </pros>
      <cons>
        <con>Vue.js specific ecosystem</con>
        <con>Less mature than react-i18next</con>
      </cons>
      <use_cases>
        <case>Vue.js applications</case>
        <case>Vue 3 Composition API projects</case>
        <case>Component-isolated translations</case>
      </use_cases>
    </framework>

    <framework name="i18next" ecosystem="Vanilla JS">
      <description>Framework-agnostic i18n library for any JavaScript application</description>
      <pros>
        <pro>Framework agnostic - works anywhere</pro>
        <pro>Core library for most React/Vue solutions</pro>
        <pro>Extensive plugin ecosystem</pro>
        <pro>Backend integration capabilities</pro>
      </pros>
      <cons>
        <con>Requires framework-specific integration</con>
        <con>More complex setup for beginners</con>
      </cons>
      <use_cases>
        <case>Vanilla JavaScript applications</case>
        <case>Custom framework integrations</case>
        <case>Backend i18n services</case>
      </use_cases>
    </framework>
  </framework_matrix>

  <detection_workflow>
    <step number="1" name="analyze_existing_setup">
      <action>Check package.json for existing i18n libraries</action>
      <action>Examine project structure for locale folders</action>
      <action>Look for i18n configuration files</action>
      <validation>Document current i18n implementation if any</validation>
    </step>

    <step number="2" name="assess_requirements">
      <action>Determine number of target languages</action>
      <action>Identify complexity of translations (plurals, gender, RTL)</action>
      <action>Check for server-side rendering needs</action>
      <action>Assess team familiarity with specific frameworks</action>
    </step>

    <step number="3" name="recommend_solution">
      <action>Match framework to project requirements</action>
      <action>Consider migration complexity if changing frameworks</action>
      <action>Evaluate bundle size and performance impact</action>
      <action>Provide setup instructions and examples</action>
    </step>
  </detection_workflow>

  <quick_recommendations>
    <scenario name="next_js_project">
      <primary>next-intl</primary>
      <secondary>react-i18next</secondary>
      <reasoning>next-intl provides seamless Next.js integration with built-in routing</reasoning>
    </scenario>

    <scenario name="create_react_app">
      <primary>react-i18next</primary>
      <secondary>i18next</secondary>
      <reasoning>react-i18next offers comprehensive React integration and features</reasoning>
    </scenario>

    <scenario name="vue_project">
      <primary>vue-i18n</primary>
      <secondary>i18next</secondary>
      <reasoning>vue-i18n provides official Vue.js ecosystem integration</reasoning>
    </scenario>

    <scenario name="vanilla_js">
      <primary>i18next</primary>
      <secondary>polyglot</secondary>
      <reasoning>i18next is framework-agnostic and highly extensible</reasoning>
    </scenario>
  </quick_recommendations>
</framework_detection>