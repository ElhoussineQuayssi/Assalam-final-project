<tool_usage_guide>
  <tool_priorities>
    <priority level="1">
      <tool>read_file</tool>
      <when>Always use first to analyze existing component structure</when>
      <why>Understanding current implementation is critical before transformation</why>
      <parameters>
        <param name="path">Component file path to read</param>
      </parameters>
      <example>
        <code>read_file path="components/unified/HeroSection.jsx"</code>
        <purpose>Get complete component code to analyze structure and functionality</purpose>
      </example>
    </priority>

    <priority level="2">
      <tool>apply_diff</tool>
      <when>Updating existing component files with redesigned code</when>
      <why>Systematic replacement of component code while preserving functionality</why>
      <parameters>
        <param name="path">Component file path to update</param>
        <param name="diff">Search and replace block with old and new code</param>
      </parameters>
      <best_practices>
        <practice>Include sufficient context in SEARCH section to uniquely identify code blocks</practice>
        <practice>Make multiple related changes in single diff when possible</practice>
        <practice>Verify functionality preservation after each major change</practice>
        <practice>Use exact indentation and formatting from existing code</practice>
      </best_practices>
    </priority>

    <priority level="3">
      <tool>search_files</tool>
      <when>Finding components or patterns across the codebase</when>
      <why>Locate similar components or identify design system usage patterns</why>
      <parameters>
        <param name="path">Directory to search in</param>
        <param name="regex">Regular expression pattern to find</param>
        <param name="file_pattern">File type filter (optional)</param>
      </parameters>
      <example>
        <code>search_files path="components" regex="className.*bg-" file_pattern="*.jsx"</code>
        <purpose>Find existing background color usage patterns</purpose>
      </example>
    </priority>
  </tool_priorities>

  <component_transformation_workflow>
    <step name="initial_analysis">
      <tools>
        <tool name="read_file">
          <purpose>Read the target component file to understand current structure</purpose>
          <parameters>path="component/file/path.jsx"</parameters>
        </tool>
        <tool name="read_file">
          <purpose>Read foundation-blueprint.html to reference design patterns</purpose>
          <parameters>path="foundation-blueprint.html"</parameters>
        </tool>
      </tools>
      <output>Component analysis and design system reference</output>
    </step>

    <step name="design_system_extraction">
      <tools>
        <tool name="search_files">
          <purpose>Find existing design system usage patterns in project</purpose>
          <parameters>
            <param name="path">.</param>
            <param name="regex">bg-primary|text-accent|border-accent</param>
            <param name="file_pattern">*.jsx</param>
          </parameters>
        </tool>
      </tools>
      <output>Understanding of current design system implementation</output>
    </step>

    <step name="transformation_application">
      <tools>
        <tool name="apply_diff">
          <purpose>Update component with new design system styling</purpose>
          <parameters>
            <param name="path">component file path</param>
            <param name="diff">Complete transformation diff with old and new code</param>
          </parameters>
        </tool>
      </tools>
      <validation>
        <check>Verify component still renders correctly</check>
        <check>Check that all props work as expected</check>
        <check>Ensure responsive behavior is maintained</check>
        <check>Validate accessibility attributes</check>
      </validation>
    </step>

    <step name="quality_verification">
      <tools>
        <tool name="read_file">
          <purpose>Review final transformed component</purpose>
          <parameters>path="updated component file"</parameters>
        </tool>
        <tool name="search_files">
          <purpose>Verify design system patterns are correctly applied</purpose>
          <parameters>
            <param name="path">.</param>
            <param name="regex">foundation-blueprint patterns</param>
          </parameters>
        </tool>
      </tools>
      <output>Final quality assurance report</output>
    </step>
  </component_transformation_workflow>

  <error_handling>
    <scenario name="file_not_found">
      <condition>Component file path is incorrect or file doesn't exist</condition>
      <action>Use search_files to locate the correct component file</action>
      <fallback>list_files to explore component directory structure</fallback>
    </scenario>

    <scenario name="complex_diff">
      <condition>Component has complex nested structures making diff difficult</condition>
      <action>Break transformation into smaller, focused diffs</action>
      <fallback>Apply changes section by section with validation between each</fallback>
    </scenario>

    <scenario name="pattern_not_found">
      <condition>Design pattern from blueprint doesn't match component structure</condition>
      <action>Document pattern mismatch and use fallback design principles</action>
      <fallback>Apply general design system guidelines while maintaining functionality</fallback>
    </scenario>
  </error_handling>

  <performance_considerations>
    <consideration>
      <issue>Large diffs can be slow and error-prone</issue>
      <solution>Break complex transformations into smaller, focused changes</solution>
      <validation>Test each incremental change before proceeding</validation>
    </consideration>

    <consideration>
      <issue>Search patterns need to be specific to avoid false matches</issue>
      <solution>Use more context in regex patterns and file filters</solution>
      <validation>Review search results before applying transformations</validation>
    </consideration>
  </performance_considerations>

  <validation_procedures>
    <procedure name="pre_transformation">
      <step>Read foundation-blueprint.html to understand design system</step>
      <step>Read target component to understand current implementation</step>
      <step>Identify transformation requirements and constraints</step>
      <step>Plan diff strategy (single large diff vs multiple small diffs)</step>
    </procedure>

    <procedure name="post_transformation">
      <step>Read transformed component to verify changes</step>
      <step>Check syntax validity (JSX structure, imports, exports)</step>
      <step>Verify design system patterns are correctly applied</step>
      <step>Ensure file maintains .js extension with JSX syntax</step>
      <step>Validate that original functionality is preserved</step>
    </procedure>

    <procedure name="error_recovery">
      <step>If diff fails, use read_file to check current state</step>
      <step>Adjust search pattern with more specific context</step>
      <step>Consider breaking complex change into simpler steps</step>
      <step>Document any pattern mismatches for design system updates</step>
    </procedure>
  </validation_procedures>
</tool_usage_guide>